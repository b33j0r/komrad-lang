# Basic test for predicate-based conditionals in Komrad

If = {
    # Simple condition with no else
    [_(true) _{consequent}] {
        *consequent
    }

    # Condition with else clause
    [_(true) _{consequent} else _{alternative}] {
        *consequent
    }

    # Condition for else clause
    [_(false) _{consequent} else _{alternative}] {
        *alternative
    }
}

if = spawn If {}

## Basics

# Test with true condition
if (true) {
    Io println "PASS: This should be printed because the condition is true."
}

# Test with false condition
if (false) {
    Io println "FAIL: This should not be printed because the condition is false."
}

# Test with else clause
if (true) {
    Io println "PASS: This will be printed because the condition is true."
} else {
    Io println "FAIL: This should not be printed because the condition is true."
}

# Test with else clause when condition is false
if (false) {
    Io println "FAIL: This should not be printed because the condition is false."
} else {
    Io println "PASS: This will be printed because the condition is false."
}

## Equalities and Comparisons

# Test equality
if (1 == 1) {
    Io println "PASS: 1 is equal to 1."
}

if (1 != 1) {
    Io println "FAIL: 1 is not equal to 1."
} else {
    Io println "PASS: 1 is equal to 1."
}

if (1 != 2) {
    Io println "PASS: 1 is not equal to 2."
}

# Test greater than
if (2 > 1) {
    Io println "PASS: 2 is greater than 1."
}

# Test less than
if (1 < 2) {
    Io println "PASS: 1 is less than 2."
}

# Test greater than or equal to
if (2 >= 2) {
    Io println "PASS: 2 is greater than or equal to 2."
}

# Test less than or equal to
if (1 <= 2) {
    Io println "PASS: 1 is less than or equal to 2."
}

## Variables

a = 5
b = 10

Io println "a = " + a + ", b = " + b

# Test variable equality
if (a == b) {
    Io println "FAIL: a is equal to b."
} else {
    Io println "PASS: a is not equal to b."
}

# Test variable comparison
if (a < b) {
    Io println "PASS: a is less than b."
} else {
    Io println "FAIL: a is not less than b."
}

Io flush


# Example

Alice = {
    [meet you at 5] {
        Io println "PASS (1/4): Alice is happy to meet you at the exact value 5"
    }
    [see you at _(x == 5)] {
        Io println "PASS (2/4): Alice is happy to meet you at " + x
    }
    [see you at _time] {
        Io println "PASS (3/4): Alice only meets at 5 o'clock, not " + time
    }
    [how about meeting at _(x <= 4)] {
        Io println "PASS (4/4): Alice does not meet as early as " + x
    }
}

alice = spawn Alice {}

# Prints that (1/4) Alice is happy to meet you at the exact value 5
alice meet you at 5

# Prints that (2/4) Alice is happy to meet you at 5
alice see you at 5

# Prints that (3/4) Alice only meets at 5 o'clock, not 3
alice see you at 3

# Prints that (4/4) Alice does not meet as early as 4
alice how about meeting at 4

# Prints that (4/4) Alice does not meet as early as 3
alice how about meeting at 3


# Example of implicit equation solving
Bob = {
    [add two _(x - 2)] {
        Io println "PASS: Bob adds two to " + (x - 2) + ", result is " + x
    }
}

bob = spawn Bob {}

# Prints that Bob adds two to 3, result is 5
bob add two 3